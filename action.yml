name: "Setup osxcross"
author: mbround18
description: Setup osxcross for rust/other compilation projects.
branding:
  icon: 'aperture'  
  color: 'green'


inputs:
  osx-version:
    description: "Version of osx to use."
    required: true
  sdk-url: 
    description: "Base URL of where to find macOS SDKs"
    required: false
    default: "https://github.com/joseluisq/macosx-sdks/releases/download"
  debug: 
    description: "Enable osxcross debug output"
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - shell: bash
      name: Check system
      run: |
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
          echo "Found linux based system, proceeding."
          if [ -z "${{ inputs.osx-version }}" ]; then
            echo "Error!: Osx Version required!"
            exit 1
          fi
        else
          echo "Error!: Your system must be a linux based system! Try running this on ubuntu-latest."
          exit 1
        fi

    - shell: bash
      run: mkdir -p $GITHUB_ACTION_PATH/osxcross

    - shell: bash
      id: target
      run: |
        repeat(){
          for i in {1..90}; do echo -n "$1"; done
        }

        echo "::group::Disclaimer Click Here for Info"
        echo ""
        repeat "-"
        echo ""
        echo "The first time you run this it will take upwards of 9 minutes to compile. Subsequent builds are cached."
        echo ""
        repeat "-"
        echo ""
        echo "::endgroup::"


        echo "::group::Installing Deps"
        sudo apt-get update
        sudo apt-get install -y -qq clang gcc g++ zlib1g-dev libmpc-dev libmpfr-dev libgmp-dev
        echo "::endgroup::"

        OSXCROSS_FOLDER="$(echo "$GITHUB_ACTION_PATH/osxcross" | sed 's/\.\/*//g')"

        echo "::group::Cloning osxcross"
        git clone https://github.com/tpoechtrager/osxcross "$OSXCROSS_FOLDER"
        echo "::endgroup::"

        # Check setup for osx version
        echo "::group::Fetching macosx SDK"
        FILE_NAME="MacOSX${{ inputs.osx-version }}.sdk.tar.xz"

        # Check sdk-url for release
        wget -nc "${{ inputs.sdk-url }}/${{ inputs.osx-version }}/${FILE_NAME}" -O "$OSXCROSS_FOLDER/tarballs/${FILE_NAME}"
        echo "::endgroup::"

        echo "OSXCROSS_TARGET=${OSXCROSS_FOLDER}/target" >> $GITHUB_ENV
        echo "OSXCROSS_FOLDER=${OSXCROSS_FOLDER}" >> $GITHUB_ENV

    - name: Restore Cached Osxcross Build 
      id: cache-restore
      uses: actions/cache/restore@v3.2.3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ${{ env.OSXCROSS_TARGET }}
          ${{ env.OSXCROSS_FOLDER }}/target/bi
        key: ${{ runner.os }}-osxcross-${{ inputs.osx-version }}

    - shell: bash 
      name: Configure Osxcross Build Debug Output
      if: inputs.debug == 'true'
      run: echo "OCDEBUG=1" >> $GITHUB_ENV

    - shell: bash
      id: build-osxcross
      if: steps.cache-restore.outputs.cache-hit != 'true'
      env:
        SDK_VERSION: "${{ inputs.osx-version }}"
        UNATTENDED: "yes"
      run: |
        cd "${{ env.OSXCROSS_FOLDER }}"
        pwd
        ls -lah 
        bash ./build.sh

    - name: Cache Osxcross Build 
      if: steps.cache-restore.outputs.cache-hit != 'true'
      id: cache-save
      uses: actions/cache/save@v3.2.3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ${{ env.OSXCROSS_TARGET }}
          ${{ env.OSXCROSS_FOLDER }}/target/bi
        key: ${{ runner.os }}-osxcross-${{ inputs.osx-version }}
          
    - shell: bash
      run: |
        echo "::group::Setting up Bin files"
        OSXCROSS_FOLDER="$(echo "$GITHUB_ACTION_PATH/osxcross" | sed 's/\.\/*//g')"
        echo "OSXCROSS Folder = ${OSXCROSS_FOLDER}"

        if [ ! -d "$OSXCROSS_FOLDER/target/bin" ]; then
          echo "Error! Failed to find ${OSXCROSS_FOLDER}/target/bin folder!"
          exit 1
        else
          chmod +x $OSXCROSS_FOLDER/target/bin/*
        fi
        echo "::endgroup::"

        echo "::group::Finding Executables"
        echo "$OSXCROSS_FOLDER/target/bin" >> $GITHUB_PATH
        findTarget() {
          local file="$(find "$OSXCROSS_FOLDER/target/bin" -name "$1")"
          echo "$(basename $file)"
        }

        LINKER_FILE="$(findTarget "x86_64-apple-darwin*-clang")"
        AR_FILE="$(findTarget "x86_64-apple-darwin*-ar")"
        echo "::endgroup::"

        echo "Setting: CARGO_TARGET_X86_64_APPLE_DARWIN_RUSTFLAGS=\"-C linker=${AR_FILE} -C linker=${LINKER_FILE} -C link-arg=-undefined -C link-arg=dynamic_lookup\""
        echo "CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=${LINKER_FILE}" >> $GITHUB_ENV
        echo "CARGO_TARGET_X86_64_APPLE_DARWIN_RUSTFLAGS=-Car=${AR_FILE},-Clink-arg=-undefined,-Clink-arg=dynamic_lookup" >> $GITHUB_ENV
        echo "OSXCROSS_ROOT=$OSXCROSS_FOLDER" >> $GITHUB_ENV
